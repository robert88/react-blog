1、回调地狱是什么意思？
  
  地狱嘛，首先来了解一下18层地狱吧，拔舌地狱、剪刀地狱、铁树地狱、孽镜地狱、蒸笼地狱、铜柱地狱；刀山地狱、冰山地狱、油锅地狱、牛坑地狱、石压地狱、舂臼地狱、血池地狱；
  枉死地狱、磔刑地狱、火山地狱、石磨地狱、刀锯地狱；跑题了
  
   言归正传，回调地狱主要是针对异步操作而言，再node中io操作都提供了异步操作io，异步操作回调就非常重要，那么有多个异步操作。并且有执行顺序。就必须回调里套异步操作
   a1(funciton(){
    a2(function(){
    ...
    })
   })
   
   如果有18个这样的操作，那就掉地狱了。可读性和调试都差。
   
   那么如果解决这个问题，可读性差，我们可以初步优化
   1、提取function这个是提高可读性，复用性最常用的办法。
上面的代码是没办法提取function了，应为已经够简洁了

如果以下代码

a1(function(){
...
...
...
...
 a2(function(){
  ...
  ...
  ..
 })
})
//提取function
function b2(){
  ...
  ...
  ..
}
function b1(){
...
...
...
...
 a2(b2);
}
a1(b1);

这样可读性会好些，如果已经是很简洁的function，这个优化就没必要了

2、使用promise

目前promise有多个版本，原理都差不多

有blueBird、q、es6内置、还有一些框架里面集成了promise
promise要深入学习的请阅读promise源码分析


async.js
这个库

深入学习请阅读async源码分析


es7
async 和 await

这个使用方式比较简单

async function（）{
return await 异步操作
}


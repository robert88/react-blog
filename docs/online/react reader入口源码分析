-->ReactDOM.render(
  <App store={store} />,
  document.getElementById('app')
);

这个接口会在webpack:///../node_modules/react/cjs/react.development.js调用
-->createElementWithValidation(type, props, children)
type指向App类，props指向store
store包含以下信息
asyncReducers:{}
asyncSagas:{}
dispatch:ƒ (action)
getState:ƒ getState()
reducers:{router: ƒ, app: ƒ, home: ƒ, article: ƒ, categoryList: ƒ}
replaceReducer:ƒ replaceReducer(nextReducer)
runSaga:ƒ (saga)
subscribe:ƒ subscribe(listener)
Symbol(observable):ƒ observable()


把react导进来有以下成员
Children:{map: ƒ, forEach: ƒ, count: ƒ, toArray: ƒ, only: ƒ}
Component:ƒ Component(props, context, updater)
Fragment:Symbol(react.fragment)
PureComponent:ƒ PureComponent(props, context, updater)
StrictMode:Symbol(react.strict_mode)
cloneElement:ƒ cloneElementWithValidation(element, props, children)
createContext:ƒ createContext(defaultValue, calculateChangedBits)
createElement:ƒ createElementWithValidation(type, props, children)
createFactory:ƒ createFactoryWithValidation(type)
createRef:ƒ createRef()
forwardRef:ƒ forwardRef(render)
isValidElement:ƒ isValidElement(object)
unstable_AsyncMode:Symbol(react.async_mode)
version:"16.3.1"
__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner: {…}, ReactDebugCurrentFrame: {…}, ReactComponentTreeHook: {…}, assign: ƒ}


-->isValidElementType
有效的类型有：1、string,function
2\REACT_FRAGMENT_TYPE
3\REACT_ASYNC_MODE_TYPE
4\REACT_STRICT_MODE_TYPE
5\特定的对象object 必须满足不为null、
type.$$typeof === REACT_PROVIDER_TYPE
type.$$typeof === REACT_CONTEXT_TYPE
type.$$typeof === REACT_FORWARD_REF_TYPE

2-5后面来理解

-->createElement
可以看得出this的createElement!=createElement而是
this.createElement===createElementWithValidation


-->hasValidRef//关于成员ref不知道用途
-->hasValidKey

可能会用到__source、__self目前不知道用途
hasOwnProperty方法让你知道一个属性是直接在一个对象的实例上还是从它的原型链继承而来。实例为true

for in 是可以遍历继承的原型的属性

RESERVED_PROPS包含
key:true
ref:true
__self:true
__source:true

将store赋值给props.store
如果有children就赋值给props.children 后面的都是childrens

Object.freeze() 方法可以冻结一个对象，冻结指的是
不能向这个对象添加新的属性，
不能修改其已有属性的值，
不能删除已有属性，
以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。
该方法返回被冻结的对象。

冻结的对象赋值无效，不会报错

APP类如有有defaultProps
那么也会copy到props

前面谈到的key和ref和$$typeof displayname name  有点瓜葛，目前不知道

-->ReactElement

ReactCurrentOwner不知道干嘛用的，从下面的赋值来看应该是react属性值
最终得到props
store:{reducers: {…}, dispatch: ƒ, subscribe: ƒ, getState: ƒ, replaceReducer: ƒ, …}
ref:null
self:null
source:null
定义了一个element这个就是react对于的虚拟dom
 var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };
  element._store是个对象
  
  成员有validated、_self、_source
validated是用于开发环境里面的测试
冻结element和elemet.protos

  // self and source are DEV only properties.开发环境才会用到这两个属性
  
  得到了虚拟dom之后return回-->createElementWithValidation
  -->validateChildKeys 如果有children就校验
  显然app类不是REACT_FRAGMENT_TYPE 这个应该是dom片段
  --》validatePropTypes校验element的合法性
  
  function 是可以通过displayname和name来获取函数名称，displayname多用于成员名
  
  app类会用到propTypes目前定义element
 
  如果写成这样PropTypes会有个提示，我觉得没必要
  getDefaultProps如果有这个也会提示
  getDefaultProps is only used on classic React.createClass
  只用在这个方法里面
  
  以上是jsx语法得到一个react element
  
  完了之后回到render
  --》legacyRenderSubtreeIntoContainer
  
  isValidContainer判断是否是个dom对象
  
  node.nodeType === ELEMENT_NODE|| 
  node.nodeType === DOCUMENT_NODE || 
  node.nodeType === DOCUMENT_FRAGMENT_NODE ||
 &&优先级要高于||
  node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '//没看懂
  --》topLevelUpdateWarnings
  
  _reactRootContainer不知道干嘛用的
  和这些有关联nodeType、findHostInstanceWithNoPortals、._internalRoot.current
  _reactRootContainer
  --》getReactRootElementInContainer
  这个如果是document就获取documentElement，如果不是就获取第一个children
  如果container是body的话可能会有提示，react不建议渲染到body上面
  这个_reactRootContainer这个参数来表示是否安装了react组件
  -》legacyCreateRootFromDOMContainer
  
  参数中有个forceHydrate，指定为false
  这个是来控制shouldHydrateDueToLegacyHeuristic是否调用
  
  --〉getReactRootElementInContainer
  
  关联"data-reactroot，ROOT_ATTRIBUTE_NAME
  
  回到legacyCreateRootFromDOMContainer
  如果有子类就会删除掉，如果有data-reactroot就会提示
  
  这里提到一个词hydrate
  网上解释
  因为ssr时服务器输出的是字符串，而浏览器端需要根据这些字符串完成react的初始化工作，比如创建组件实例，这样才能响应用户操作。
  这个过程就叫hydrate，有时候也会说re-hydrate，可以把hydrate理解成给干瘪的字符串”注水”
  
  webpack:///../node_modules/react-dom/cjs/react-dom.development.js
  ReactRoot构造器
  
  --》DOMRenderer.createContainer
  --》createFiberRoot
  --》createHostRootFiber
  参数isAsync
  决定? AsyncMode | StrictMode : NoContext;模式
  --》createFiber
  
  构造器FiberNode
  POJO是Plain OrdinaryJava Object是java的对象
  
  在JavaScript的世界里,有两个词经常被提到,shim和polyfill.它们指的都是什么,又有什么区别?
一个shim是一个库,它将一个新的API引入到一个旧的环境中,而且仅靠旧环境中已有的手段实现
一个polyfill就是一个用在浏览器API上的shim.我们通常的做法是先检查当前浏览器是否支持某个API,如果不支持的话就加载对应的polyfill.然后新旧浏览器就都可以使用这个API了.术语polyfill来自于一个家装产品Polyfilla:
  
  回到--》createHostRootFiber，得到一个未初始化的fiber
alternate:null
child:null
effectTag:0
expirationTime:0
firstEffect:null
index:0
key:null
lastEffect:null
memoizedProps:null
memoizedState:null
mode:0
nextEffect:null
pendingProps:null
ref:null
return:null
sibling:null
stateNode:null
tag:3
type:null
updateQueue:null
_debugID:1
_debugIsCurrentlyTiming:false
_debugOwner:null
_debugSource:null

再将这个合并到root里面
var root = {
    current: uninitializedFiber,//未初始化fiber
    containerInfo: containerInfo,
    pendingChildren: null,
    pendingCommitExpirationTime: NoWork,
    finishedWork: null,
    context: null,
    pendingContext: null,
    hydrate: hydrate,
    remainingExpirationTime: NoWork,
    firstBatch: null,
    nextScheduledRoot: null
  };
  uninitializedFiber.stateNode = root;
这个结构就是最终--》DOMRenderer.createContainer这个函数要得到的结构

最终得到ReactRoot这个实例
_internalRoot就是上面的那个结构

container._reactRootContainer 通过legacyCreateRootFromDOMContainer得到ReactRoot这个实例

--》  DOMRenderer.unbatchedUpdates
涉及到isBatchingUpdates && !isUnbatchingUpdates这两个关口不知道干嘛用的执行回调

回到回调函数
parentComponent父类组件
     if (parentComponent != null) {
        root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
      } else {
        root.render(children, callback);
      }
      
      这个函数是对应的ReactRoot.prototype.render
      
        var work = new ReactWork();得到一个这样的实例
        _callbacks:null
       _didCommit:false
      _onCommit:ƒ ()

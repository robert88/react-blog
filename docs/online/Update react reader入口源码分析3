发现如果按之前的读源码的方式，可能就真的看不懂了

现在改变路线，以大的function来读源码

--》ReactDOM.render入口函数
第一个参数是jsx语法，先跳过这个
element, container, callback
element是虚拟dom
container是实际的容器dom
callback不知道干嘛的，后面来看

--》legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) 

可以看到入口render调用这个函数parentComponent是为null的，forceHydrate为false，
hydrate主要是用于给服务端渲染出的html结构进行“注水”，由于新版本中ssr出的dom节点不再带有data-react，为了能尽可能复用ssr的html内容

--》unbatchedUpdates
根据是否是调节器和渲染器里面来决定是否渲染

当前是在渲染器所以就会执行以下
--》root.render(children, callback);
root是这样来的
 root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);这个函数请看《legacyCreateRootFromDOMContainer》
  
  这样就可以看到虚拟dom里面是有个渲染器的，其实root是reactRoot实例，reactRoot里面有个渲染器
  
--》ReactRoot.prototype.render = function (children, callback) reactRoot渲染器
每个渲染器里面都会初始化一个调度器
 var work = new ReactWork()
 
 如果有callback，那么它在then里面会被调用。应该是渲染完成之后会调用then函数
 
 --》DOMRenderer.updateContainer(children, root, null, work._onCommit);
   updateContainer: function (element, container, parentComponent, callback)
   
   这里也是从container里面取出container.current时个fiberNode属性，这个应该也是legacyCreateRootFromDOMContainer这里初始化的
   currentTime:是通过new Date或者performance.now来计算的，并且单位是10ms，偏移量20ms
   expirationTime
   参考阅读http://www.php.cn/js-tutorial-386254.html
   https://www.colabug.com/1991096.html
   
 /************************************************/
export const NoWork = 0; // 没有任务等待处理
export const Sync = 1; // 同步模式，立即处理任务
export const Never = 2147483647; // Max int32: Math.pow(2, 31) - 1
const UNIT_SIZE = 10; // 过期时间单元（ms）
const MAGIC_NUMBER_OFFSET = 2; // 到期时间偏移量

// 以ExpirationTime特定单位（1单位=10ms）表示的到期执行时间
// 1 unit of expiration time represents 10ms.
export function msToExpirationTime (ms) {
  // 总是增加一个偏移量，在ms<10时与nowork模式进行区别
  return ((ms / UNIT_SIZE) | 0) + MAGIC_NUMBER_OFFSET;
}
// 以毫秒表示的到期执行时间
export function expirationTimeToMs(expirationTime: ExpirationTime) {
  return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
}
// 向上取整（整数单位到期执行时间）
// precision范围精度：弥补任务执行时间误差
function ceiling(num, precision) {
  return (((num / precision) | 0) + 1) * precision;
}

// 计算处理误差时间在内的到期时间
export function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs,) {
  return ceiling(
    currentTime + expirationInMs / UNIT_SIZE,
    bucketSizeMs / UNIT_SIZE
  );
}   
</10时与nowork模式进行区别
/************************************************/

过期时间有7种情况
最开始render进来的话是sync同步渲染
    
   --》updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);
   
   这个更新
   getContextForSubtree参数parentComponent，当为null的时候就为空对象，然后就更新container.context = context;
 
 -->scheduleRootUpdate
 将类虚拟dom和过期时间组合成update
 -->insertUpdateIntoFiber/scheduleWork
ensureUpdateQueues/createUpdateQueue
更新q1,q2当前
  var queue = {
    baseState: baseState,
    expirationTime: NoWork,
    first: null,
    last: null,
    callbackList: null,
    hasForceUpdate: false,
    isInitialized: false,
    capturedValues: null
  };
  {
    queue.isProcessing = false;
  }
将update数据结构赋值给current.updateQueue


-->scheduleWorkImpl
 scheduleWorkImpl(fiber, expirationTime, isErrorRecovery)
 isErrorRecovery是false值
recordScheduleUpdate改变hasScheduledUpdateInCurrentCommit或者hasScheduledUpdateInCurrentPhase

 ->performSyncWork
 如果expirationTime==sync
 --》performWork(minExpirationTime, isAsync, dl)
     deadline = dl;
 findHighestPriorityRoot
 改变nextFlushedRoot、nextFlushedExpirationTime

 --》performWorkOnRoot(root, expirationTime, isAsync)

 isRendering=true
 
 --》renderRoot
 startWorkLoopTimer
 isWorking= true
 /*****
 resetStack
 改变
     nextRoot = null;
    nextRenderExpirationTime = NoWork;
    nextUnitOfWork = null;
    isRootReadyForCommit = false;
    ***/
nextRoot = root;
nextRenderExpirationTime = expirationTime;
nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
/**
current.alternate;
**/
 root.pendingCommitExpirationTime
 /**
  startWorkLoopTimer
    currentFiber = nextUnitOfWork;
    commitCountInCurrentWorkLoop = 0;
**/
--> workLoop(isAsync)
循环while (nextUnitOfWork !== null) {
-->performUnitOfWork
/**
startWorkTimer
enableUserTimingAPI
supportsUserTiming
currentFiber
fiber._debugIsCurrentlyTiming = true;
**/
/**
replayFailedUnitOfWorkWithInvokeGuardedCallback
 stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
**/
-->beginWork(current, workInProgress, nextRenderExpirationTime);
如果时间过期或者优先级为no-work
bailoutOnLowPriority(current, workInProgress);
根据workInProgress.tag来区分不同的渲染
ClassComponent这个类型对应updateClassComponent

--》updateClassComponent(current, workInProgress, renderExpirationTime);
/**
pushLegacyContextProvider
isContextProvider
previousContext
**/
/**
-->resumeMountClassInstance
resetInputPointers
getUnmaskedContext
callComponentWillReceiveProps
processUpdateQueue
callGetDerivedStateFromCatch
checkShouldComponentUpdate
startPhaseTimer
涉及到实例的调用
UNSAFE_componentWillMount、componentWillMount
**/
 --》finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime);
 /*
 markRef 
 workInProgress.effectTag 
 */
 

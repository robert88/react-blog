该实例采用的是yarn来管理依赖
npm和yarn有什么区别请访问
https://github.com/neal1991/articles-translator/blob/master/Npm%2C%20yarn%E4%BB%A5%E5%8F%8Apnpm%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84.md

添加依赖
yarn add --dev redux-devtools
发生一个错误
error An unexpected error occurred: "http://npm.byted.org/is-buffer/-/is-buffer-1.1.6.tgz: getaddrinfo ENOTFOUND npm.byted.org npm.byted.org:80".
info If you think this is a bug, please open a bug report with the information provided in "D:\\react-blog\\yarn-error.log".
info Visit https://yarnpkg.com/en/docs/cli/add for documentation about this command.

npm config get proxy
 npm config get https-proxy
得到null
试了这个
1 npm config set registry http://registry.cnpmjs.org/
 没有用
 再试了
2、直接编辑c盘下nodejs安装路径的.npmrc文件，将registry的值修改为：
 registry = http://registry.cnpmjs.org
也没有用

最终使用
npm install redux-devtools
安装了这个包

找到readme
按照readme里面的步骤执行可以得到一个app界面，即环境ok


在页面中右键可以得到一个界面的源码，可以看到基本和index.html的内容是一致，只是增加了几个js，现在我们来看一下如何通过这样的环境生成我们看到的页面
用的是猎豹浏览器，一开始老是F12是ie的调试器，加了下面代码还是没有用，那就直接右键有个转为急速模式，ok可以看到chrome的调试器了
    <meta http-equiv="X-UA-Compatible" content="chrome=1">

    webpack/hot/dev-server有个热更新的东西，在cmd里面出现，我们看一下
html-webpack-plugin这个模块在做built
我们来了解一下这个模块，百度一下
https://segmentfault.com/a/1190000007294861，然后本地备份一份《webpack-html-plugin.docx》
https://www.cnblogs.com/wonyun/p/6030090.html ，然后本地备份一份《webpack-html-plugin2.docx》
这两篇文章相互有补充

看看webpack.config.js

根据命令行来判断是开发环境还是测试环境，那么回到命令行
yarn start` for develop
这个命令得看package.json中的scripts
    "start": "cross-env NODE_ENV=dev yarn lint && yarn doc && webpack-dev-server --open --env dev",
    那么执行的命令应该是这样

cross-env NODE_ENV=dev yarn lint && yarn doc && webpack-dev-server --open --env dev for develop
这个命令需要分开来kan
cross-env NODE_ENV=dev yarn lint
yarn doc
webpack-dev-server --open --env dev for develop
cmd中的&&操作表示上一个命令执行成功
https://zhidao.baidu.com/question/918430276432946939.html 《cmd中的&&.docx》
cross-env这个命令一看就是跨平台的一个命令，用来统一window和POSIX系统的命令《cross-env.docx》

明白上面的知识之后，就可以理解设置了NODE_ENV=dev这个环境变量
yarn lint
回到package.json找到scripts
    "lint": "eslint --cache --fix src",

    eslint命令
    http://cnodejs.org/topic/57c68052b4a3bca66bbddbdd
    https://eslint.org/docs/developer-guide/nodejs-api
    --fix会自动修复不规范的js代码
    --cache只会校验修改的文件

    yarn doc
    ./node_modules/.bin/documentation build src/app.js -f md > API.md


documentation是可执行文件，或者批处理文件
找到documentation.cmd，代码如下
@IF EXIST "%~dp0\node.exe" (
  "%~dp0\node.exe"  "%~dp0\..\documentation\bin\documentation.js" %*
) ELSE (
  @SETLOCAL
  @SET PATHEXT=%PATHEXT:;.JS;=;%
  node  "%~dp0\..\documentation\bin\documentation.js" %*
)
@表示不会显示执行过程的输出信息可以参考《cmd中的ifelse.docx》
%~d0表示当前执行文件的路径《cmd中%~dp0.docx》
 @SETLOCAL 《cmd中local.docx》

 接下来看看第三个命令
 webpack-dev-server --open --env dev for develop

 https://segmentfault.com/a/1190000006964335《webpack_dev_server.docx》
/--------------貌似没用-------------
 在公司因为没有对外的网络，但是又要自己学习git，下面就自己按教程搭建一个自己的git仓库
 https://blog.csdn.net/lilinoscar/article/details/72626577
 
 安装git，新建一个文件夹react，右键git init ，git remote add react file:///d:/svn/react
 在新建文件夹，查考git remote -v ，git clone file:///d:/svn/react
 
 这样就搭建了自己本地的git仓库,
 -------貌似没用------------/


 看看webpack的配置文件https://www.jianshu.com/p/42e11515c10f
const webpack = require('webpack');
const webpackMerge = require('webpack-merge');

引用了这两个


webpackMerge
实在是没看到好的教程，看看源码吧，代码注释到源码上node_modules

总结：
该模块提供一下api
module.exports = merge;
module.exports.multiple = mergeMultiple;
module.exports.smart = mergeSmart;
module.exports.strategy = mergeStrategy;
module.exports.smartStrategy = mergeSmartStrategy;
module.exports.unique = _unique2.default;


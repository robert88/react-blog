https://www.cnblogs.com/wubaiqing/p/6726429.html
需要在 JS 里面维护的字段也越来越多，需要监听的事件和在事件中回调更新页面的 DOM 也越来越多，最终应用变得难以维护
为了降低复杂度就有了MVC、MVP 的架构模式，希望从代码组织的方式，但是没有降低状态更新时需要对页面的更新操作
状态变更视图自动跟着变更，就不用手动更新页面了。这就是后来的 MVVM模式，状态更新用模版引擎重新渲染一遍
因为任何的状态变更都要重新构造整个 DOM，性价比很低，所以就有了virtual dom
这就是所谓的 Virtual DOM 算法：
用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，
Virtual DOM 本质就是在 JS 和 DOM 之间做了一个缓存
在前端当中，很少会跨越层级地移动 DOM 元素。所以 Virtual DOM 只会对同一个

层级的元素进行对比，下面的 div 只会和同一层级的 div 对比，第二层级的只会跟第二层级对

比。采用的是深度优先遍历，来记录差异，这样每个节点都会有一个唯一的标记。

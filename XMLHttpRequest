XHR

jq中ajax可用的datatype是预定义好的，有如下几种：

xml
html
script
json
jsonp
text
所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。

blob ie10+ Firefox、Chrome、Safari 以及 Opera）支持
Filereader  ie10+ Firefox、Chrome、Safari 以及 Opera）支持
formData ie10+ Firefox、Chrome、Safari 以及 Opera）支持
audio ie9+ Firefox、Chrome、Safari 以及 Opera）支持
a标签的download属性： ie不支持，edeg、 Firefox、Chrome、Safari 以及 Opera支持，跨域Firefox不支持

https://blog.csdn.net/ldb987/article/details/79100366

一、建立xmlHttpRequest对象
xmlhttp = new XMLHttpRequest()
二、设置回调函数  
xmlHttp.onreadystatechange= callback;  
三、与服务器建立连接
xmlHttp.open("get",url,async)用于初始化HTTP请求参数，但并不发送（send）；初始化method：get、post、head、...;url，async：取值为true或者false。指定了请求模式是同步（false）还是异步（true）。
async如果没有传递,即arguments.length<3
xmlHttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded") //初始化http请求头
四、向服务器端发送数据 
如果是get方式，代码如下：
xmlHttp.send(null); 
如果是post方式，代码如下：
xmlHttp.send(name="+ nam); 

oReq.overrideMimeType("text/plain; charset=x-user-defined");将发送的方式变成二进制方式发送到服务器端

使用二进制接收文件，必须异步请求
oReq.onload = function(e) {
  var arraybuffer = oReq.response; // not responseText
  /* ... */
}
oReq.open("GET", url);
oReq.responseType = "arraybuffer";
open must be placed before xhr.responseType in code 不然ie和火狐会出错

post请求带参数需要：
      var form = new FormData();
      form.append('text', 'hello');
      oReq.send(form);

四个阶段
oReq.addEventListener("progress", updateProgress);
oReq.addEventListener("load", transferComplete);
oReq.addEventListener("error", transferFailed);
oReq.addEventListener("abort", transferCanceled);

获取头部信息
function getHeaderTime () {
  var nLastVisit = parseFloat(window.localStorage.getItem('lm_' + this.filepath));
  var nLastModif = Date.parse(this.getResponseHeader("Last-Modified"));

  if (isNaN(nLastVisit) || nLastModif > nLastVisit) {
    window.localStorage.setItem('lm_' + this.filepath, Date.now());
    isFinite(nLastVisit) && this.callback(nLastModif, nLastVisit);
  }
}

function ifHasChanged(sURL, fCallback) {
  var oReq = new XMLHttpRequest();
  oReq.open("HEAD" /* use HEAD - we only need the headers! */, sURL);
  oReq.callback = fCallback;
  oReq.filepath = sURL;
  oReq.onload = getHeaderTime;
  oReq.send();
}

上传文件
var AJAXSubmit = (function () {

  function ajaxSuccess () {
    /* console.log("AJAXSubmit - Success!"); */
    console.log(this.responseText);
    /* you can get the serialized data through the "submittedData" custom property: */
    /* console.log(JSON.stringify(this.submittedData)); */
  }

  function submitData (oData) {
    /* the AJAX request... */
    var oAjaxReq = new XMLHttpRequest();
    oAjaxReq.submittedData = oData;
    oAjaxReq.onload = ajaxSuccess;
    if (oData.technique === 0) {
      /* method is GET */
      oAjaxReq.open("get", oData.receiver.replace(/(?:\?.*)?$/,
          oData.segments.length > 0 ? "?" + oData.segments.join("&") : ""), true);
      oAjaxReq.send(null);
    } else {
      /* method is POST */
      oAjaxReq.open("post", oData.receiver, true);
      if (oData.technique === 3) {
        /* enctype is multipart/form-data */
        var sBoundary = "---------------------------" + Date.now().toString(16);
        oAjaxReq.setRequestHeader("Content-Type", "multipart\/form-data; boundary=" + sBoundary);
        oAjaxReq.sendAsBinary("--" + sBoundary + "\r\n" +
            oData.segments.join("--" + sBoundary + "\r\n") + "--" + sBoundary + "--\r\n");
      } else {
        /* enctype is application/x-www-form-urlencoded or text/plain */
        oAjaxReq.setRequestHeader("Content-Type", oData.contentType);
        oAjaxReq.send(oData.segments.join(oData.technique === 2 ? "\r\n" : "&"));
      }
    }
  }

  function processStatus (oData) {
    if (oData.status > 0) { return; }
    /* the form is now totally serialized! do something before sending it to the server... */
    /* doSomething(oData); */
    /* console.log("AJAXSubmit - The form is now serialized. Submitting..."); */
    submitData (oData);
  }

  function pushSegment (oFREvt) {
    this.owner.segments[this.segmentIdx] += oFREvt.target.result + "\r\n";
    this.owner.status--;
    processStatus(this.owner);
  }

  function plainEscape (sText) {
    /* How should I treat a text/plain form encoding?
       What characters are not allowed? this is what I suppose...: */
    /* "4\3\7 - Einstein said E=mc2" ----> "4\\3\\7\ -\ Einstein\ said\ E\=mc2" */
    return sText.replace(/[\s\=\\]/g, "\\$&");
  }

  function SubmitRequest (oTarget) {
    var nFile, sFieldType, oField, oSegmReq, oFile, bIsPost = oTarget.method.toLowerCase() === "post";
    /* console.log("AJAXSubmit - Serializing form..."); */
    this.contentType = bIsPost && oTarget.enctype ? oTarget.enctype : "application\/x-www-form-urlencoded";
    this.technique = bIsPost ?
        this.contentType === "multipart\/form-data" ? 3 : this.contentType === "text\/plain" ? 2 : 1 : 0;
    this.receiver = oTarget.action;
    this.status = 0;
    this.segments = [];
    var fFilter = this.technique === 2 ? plainEscape : escape;
    for (var nItem = 0; nItem < oTarget.elements.length; nItem++) {
      oField = oTarget.elements[nItem];
      if (!oField.hasAttribute("name")) { continue; }
      sFieldType = oField.nodeName.toUpperCase() === "INPUT" ? oField.getAttribute("type").toUpperCase() : "TEXT";
      if (sFieldType === "FILE" && oField.files.length > 0) {
        if (this.technique === 3) {
          /* enctype is multipart/form-data */
          for (nFile = 0; nFile < oField.files.length; nFile++) {
            oFile = oField.files[nFile];
            oSegmReq = new FileReader();
            /* (custom properties:) */
            oSegmReq.segmentIdx = this.segments.length;
            oSegmReq.owner = this;
            /* (end of custom properties) */
            oSegmReq.onload = pushSegment;
            this.segments.push("Content-Disposition: form-data; name=\"" +
                oField.name + "\"; filename=\"" + oFile.name +
                "\"\r\nContent-Type: " + oFile.type + "\r\n\r\n");
            this.status++;
            oSegmReq.readAsBinaryString(oFile);
          }
        } else {
          /* enctype is application/x-www-form-urlencoded or text/plain or
             method is GET: files will not be sent! */
          for (nFile = 0; nFile < oField.files.length;
              this.segments.push(fFilter(oField.name) + "=" + fFilter(oField.files[nFile++].name)));
        }
      } else if ((sFieldType !== "RADIO" && sFieldType !== "CHECKBOX") || oField.checked) {
        /* NOTE: this will submit _all_ submit buttons. Detecting the correct one is non-trivial. */
        /* field type is not FILE or is FILE but is empty */
        this.segments.push(
          this.technique === 3 ? /* enctype is multipart/form-data */
            "Content-Disposition: form-data; name=\"" + oField.name + "\"\r\n\r\n" + oField.value + "\r\n"
          : /* enctype is application/x-www-form-urlencoded or text/plain or method is GET */
            fFilter(oField.name) + "=" + fFilter(oField.value)
        );
      }
    }
    processStatus(this);
  }

  return function (oFormElement) {
    if (!oFormElement.action) { return; }
    new SubmitRequest(oFormElement);
  };

})();

下载bolg

saveFile({
      payload: {blob, fileName = 'abcdefg.xls'},
    }, { call }) {
        if (window.navigator.msSaveOrOpenBlob) {
            navigator.msSaveBlob(blob, fileName);
        } else {
            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = fileName;
 
            //此写法兼容可火狐浏览器
            document.body.appendChild(link);
 
            var evt = document.createEvent("MouseEvents");
            evt.initEvent("click", false, false);
            link.dispatchEvent(evt);
 
            document.body.removeChild(link);
        }
        
        下载音频
        
            function parseAudioUrl(){
        var oReq = new XMLHttpRequest();
        oReq.responseType = "arraybuffer";
        oReq.open("POST", "http://bi.huawei.com/nlp/docAnalyze/2tts");
        oReq.onload = function(oEvent) {
            var blob = new Blob([oReq.response], {type: "audio/mpeg"});
            var reader = new FileReader();
            reader.readAsDataURL(blob);
            reader.onload = function(e) {
                initAudio(reader.result)
            }
            downloadAudio(blob,"demo.mp3")
        };
        var form = new FormData();
        form.append('text', '了提升资源的利用率，云架构下资源是共享的，而非独占，这与传统IT完全不同。云计算通过自动的弹性伸缩策略来实现资源共享与用户体验及业务可用性之间的平衡，这是云计算的核心优势之一。但这也带来了运维的新需求和新挑战，即运维人员往往并不知道业务系统具体运行在哪个硬件上，故障定位变得非常困难，解决这种不可知性要求运维系统要做到“更加全面的系统监控”，从而实现“可知性”');
        oReq.send(form);
    }

参数的传递：
问题：Chrome请求出现"Provisional headers are shown"：
1、处理方式： 检查该请求触发的页面，查看是否有 表单提交 和 ajax请求同时触发的情况，
例如：定义了一个按钮，type是submit，另外又给该按钮定义了一个ajax事件；

2、处理方式：调用chrome的  chrome://net-internals/#events ，然后重新触发一下请求，然后查看出现 Provisional headers are shown 的请求的日志；
查看是否存在 delegate_blocked_by 的关键字；这种一般是由于浏览器端的插件或客户端的软件对请求进行了拦截；我们出现的情况，是被 websense endpoint拦截；

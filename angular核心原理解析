启动过程分析
依赖注入原理
指令的执行过程
$scope和双向数据绑定分析
JavaScript语言精粹

启动过程
自动启动
手动启动
多个ng-app
绑定jquery
全局angular
publishExternalAPI
setupModuleLoader
注册内核provider $parse $rootScope

angualrInit 防止多次初始化

创建injector、拉起内核和启动模块、调用complite服务

用自执行函数的形式让整个代码在加载完成之后立即执行

window.angualr.bootstrap标识初始化

bindJQuery
publichExtentApi
jqLite


angular的成员有哪些
一共28个26个function

angular.injector

annotate\get\invoke

ng-app会自动启动

手动启动
angular.element(document).ready(function(){
angular.bootstrap(element,["mymodule"])
})

ng-app不嵌套

如果写了两个ng-app

第二个需要手动启动


setupModuleLoader

angularInit

bootstrap
creatInjector
compile


为啥要依赖注入？
直接使用$injector
provider模式和ng实现
provider/factory/service/constant/value/decorator

$controllerProvider
injector源码（创建、注册，调用）

形参必须和service的名称对应
但是混淆工具会把这个方式改变
angular.module("app");
function myctrl(myscope){}
myctrl.$injector = ["$scope"]
app.controller("myctrl",myctrl);

myscope就是$scope，如果不用可以用
app.controller("myctrl",["$scope",myctrl]);
或者定义function myctrl($scope){}

$injector.annotate(function(name1,name2){})得到["name1","name2"]
原理是fn.toString

以下可以提供注入
provider,factory,service.constant,value
以下可以接受注入
controller，service，directive，filter，factory

module.provider(“provider”,function(){
return {$get:function(){return {app:function(){}}}}
})

module.factory(“factory”,function(){
function app(){}
return {app:app}
})

module.service(“service”,function(){
this.app=function(){}
})

参数不一样，都是调用injector的provider
